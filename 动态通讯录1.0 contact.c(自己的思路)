#define _CRT_SECURE_NO_WARNINGS 1

#include"contact.h"


void AddContact(struct contact** ps)
{
	//要添加一个好友，则增加一个struct PeoInfo空间
	struct contact *ptr = (struct contact *)realloc(*ps, sizeof(struct contact) + ((*ps)->size+1)*sizeof(struct PeoInfo));
	if (ptr != NULL)
	{
		*ps = ptr;
		printf("请输入好友名字:>");
		scanf("%s", ptr->data[ptr->size].name);
		printf("请输入好友年龄:>");
		scanf("%d", &ptr->data[ptr->size].age);
		printf("请输入好友性别:>");
		scanf("%s", ptr->data[ptr->size].sex);
		printf("请输入好友电话:>");
		scanf("%s", ptr->data[ptr->size].tele);
		printf("请输入好友地址:>");
		scanf("%s", ptr->data[ptr->size].addrs);
		printf("请输入好友备注:>");
		scanf("%s", ptr->data[ptr->size].memo);
		ptr->size++;
		printf("添加成功\n");
	}
}

void ShowContact(const struct contact* ps)
{
	if ((ps)->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		int i = 0;
		printf("%-20s\t%-4s\t%-5s\t%-15s\t%-30s\t%-10s\n", "姓名", "年龄", "性别", "电话", "住址", "备注");
		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t%-4d\t%-5s\t%-15s\t%-30s\t%-10s\n", ps->data[i].name,
				(ps)->data[i].age,
				(ps)->data[i].sex,
				(ps)->data[i].tele,
				(ps)->data[i].addrs,
				(ps)->data[i].memo);
		}
	}
}

int FindByName(const struct contact * con, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < con->size; i++)
	{
		if (strcmp(con->data[i].name, name) == 0)
		{
			return i;
		}
	}
	return -1;
}

void DelContact(struct contact* * ps)
{
	if ((*ps)->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入要删除的好友姓名:>");
		scanf("%s", name);
		int pos = FindByName(*ps, name);
		if (pos == -1)
		{
			printf("找不到好友\n");
		}
		else
		{
			int i = 0;
			for (i = pos; i < (*ps)->size - 1; i++)
			{
				struct PeoInfo tmp = (*ps)->data[i + 1];
				(*ps)->data[i + 1] = (*ps)->data[i];
				(*ps)->data[i] = tmp;
			}
			//删除一个好友空间就要减少一个struct PeoInfo大小
			struct contact* ptr = (struct contact*)realloc(*ps, sizeof(struct contact) + ((*ps)->size - 1)*sizeof(struct PeoInfo));
			if (ptr != NULL)
			{
				*ps = ptr;
				(*ps)->size--;
				printf("删除成功\n");
			}
		}
	}
}

void SearchContact(const struct contact *ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入要查找的好友名字:>");
		scanf("%s", name);
		int pos = FindByName(ps, name);
		if (pos == -1)
		{
			printf("找不到\n");
		}
		else
		{
			printf("%-20s\t%-4s\t%-5s\t%-15s\t%-30s\t%-10s\n", "姓名", "年龄", "性别", "电话", "住址", "备注");
			printf("%-20s\t%-4d\t%-5s\t%-15s\t%-30s\t%-10s\n", ps->data[pos].name,
				(ps)->data[pos].age,
				(ps)->data[pos].sex,
				(ps)->data[pos].tele,
				(ps)->data[pos].addrs,
				(ps)->data[pos].memo);
		}
	}
}

int cmp_name(const void* e1, const void* e2)
{
	return strcmp(((struct PeoInfo*)e1)->name, ((struct PeoInfo*)e2)->name);
}

void SortContact(struct contact *ps)
{
	qsort(ps->data, ps->size, sizeof(struct PeoInfo), cmp_name);
	printf("排序成功\n");
}

void ModifyContact(struct contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入要修改的好友名字:>");
		scanf("%s", name);
		int pos = FindByName(ps, name);
		if (pos == -1)
		{
			printf("找不到\n");
		}
		else
		{
			printf("请输入好友名字:>");
			scanf("%s", ps->data[pos].name);
			printf("请输入好友年龄:>");
			scanf("%d", &ps->data[pos].age);
			printf("请输入好友性别:>");
			scanf("%s", ps->data[pos].sex);
			printf("请输入好友电话:>");
			scanf("%s", ps->data[pos].tele);
			printf("请输入好友地址:>");
			scanf("%s", ps->data[pos].addrs);
			printf("请输入好友备注:>");
			scanf("%s", ps->data[pos].memo);
			printf("修改成功\n");
		}
	}
}

void DestroyContact(struct contact** ps)
{
	free(*ps);
	*ps = NULL;
}
